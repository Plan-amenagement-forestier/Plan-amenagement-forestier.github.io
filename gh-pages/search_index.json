[["introduction.html", "Création dun plan daménagement forestier numérique 1 Introduction", " Création dun plan daménagement forestier numérique Florent Benoit-Pépin 2021-02-05 1 Introduction Dans sa nouvelle stratégie de production de bois, le gouvernement du Québec réitère son intention de mobiliser plus de bois dans ces forêts (Ministère des Forêts, de la Faune et des Parcs 2020). En effet, la possibilité forestière en forêt privée est évaluée à 17 Mm3. En 2019, la récolte totale sest élevée à 8,2 Mm3, soit une utilisation de 48% de la possibilité forestière (Fédération des producteurs forestiers du Québec 2019). Le défi est donc clair, il faut non seulement inciter les propriétaires de lots boisés à devenir producteur forestier, mais aussi les inciter à aménager leur forêt. Une des solutions pour remédier à ce problème serait de moderniser le plan daménagement forestier (PAF). Dans ce texte, nous tenterons, dans un premier temps, dimaginer le futur PAF numérique et dans un deuxième temps, nous explorerons le potentiel des logiciels libres avec une marche à suivre pour programmer les fonctions de base dun PAF numérique. "],["description-du-plan-daménagement-numérique.html", "2 Description du plan daménagement numérique 2.1 La carte interactive 2.2 La table des peuplement 2.3 Mise en place du plan daménagement forestier numérique", " 2 Description du plan daménagement numérique Ce plan daménagement pourrait être accessible via internet. Le propriétaire en sidentifiant, par exemple, à partir du site internet de son conseiller forestier, pourrait accéder à son espace client ou il aurait accès aux informations de son lot. Cet espace client serait composé de plusieurs onglets tels que la description des lots, les informations du propriétaire et un glossaire. Afin de mieux visualiser, jai réalisé, laide des logiciels libres R et Shiny, une ébauche de ce à quoi pourrait ressembler un plan daménagement numérique qui peut être consulté à partir de ce lien. 2.1 La carte interactive La carte interactive (figure 2.1) permettrait au propriétaire de consulter toutes les données relatives à son lot telles que la délimitation des peuplements forestiers, divers fonds de carte comme des images satellitaires et les données LIDAR (hauteur de canopée et le relief) ainsi que les points ou les inventaires ont été réalisés. En cliquant sur un peuplement forestier, le propriétaire aurait accès à toutes les informations du peuplement en question dans la table des peuplements juste en dessous. Figure 2.1: Exemple dune carte interactive 2.2 La table des peuplement Ce tableau (figure 2.2) permet de présenter toutes les informations relatives à la composition des peuplements ainsi que les travaux à effectuer. Cette table est interactive, cest-à-dire quelle permet de filtrer ou dordonner les données. De plus, la table et la carte sont interreliées. En effet, lorsquun peuplement de la carte est sélectionné, le peuplement correspondant dans le tableau est mis en évidence. Figure 2.2: Exemple de tableau des peuplements 2.3 Mise en place du plan daménagement forestier numérique Ce type de plan pourrait être implanté soit au niveau du conseiller forestier ou au niveau des agences régionales de mise en valeur des forêts privées. Selon moi, limplantation de ce type de plan auprès dun conseiller forestier peut se faire assez facilement. En effet, lélaboration dun plan daménagement numérique comme celui présenté plus haut ne nécessite pas davantage de données quun plan daménagement traditionnel. Ce type de plan peut être créé à partir de logiciels libres, et donc gratuits. Aussi, une fois que les fonctionnalités de base du plan daménagement sont programmées, il est très simple de reproduire le même plan pour tous ses clients. Nous pourrions imaginer la mise en place de ce type de plan dans une vision plus globale avec la création dune grande base de données sur les producteurs forestiers et leurs lots à léchelle dune agence régionale de mise en valeur des forêts privées. Cette base de données serait chargée ou mise à jour par les conseillers forestiers lors de la création ou du renouvellement dun PAF ou lorsque des travaux ont été effectués sur le lot. Les données des inventaires pourraient aussi y être colligées. Ceci faciliterait le travail de vérification des agences envers les conseillers forestiers. Aussi, cette base de données permettrait davoir un portrait beaucoup plus précis du territoire et du même coup, doffrir des outils intéressants pour les producteurs forestiers comme le PAF numérique. "],["construction-dun-plan-daménagement.html", "3 Construction dun plan daménagement 3.1 Étapes Préliminaires 3.2 Programmation des objets qui seront affiché dans linterface 3.3 Programmation des interactions entre la carte et la table des peuplements 3.4 Programation de linterface", " 3 Construction dun plan daménagement Dans cette section, nous verrons la marche à suivre pour créer un plan daménagement numérique. Ce plan sera sous forme dune application web construite principalement à partir du langage de programmation R, du logiciel Rstudio, un environnement de développement pour R, et de la bibliothèque logicielle (Package) Shiny. Avant de commencer la programmation, il faut avoir fait ou obtenu au préalable le découpage des peuplements forestiers du lot et leur description qui leur sont associés au format shapefile (shp.). Pour vous assister dans la création de votre première application Shiny, le code complet et les données nécessaires pour sa création sont disponibles sur Github. Ci-dessous, vous trouverez plusieurs liens qui vous seront utiles pour la création de cette application : Aide-mémoire Shiny Mastering Shiny Leaflet for R DT: An R interface to the DataTables library Shiny - Articles (rstudio.com) 3.1 Étapes Préliminaires Installez la bibliothèque Shiny. install.packages(&quot;shiny&quot;) Créez un fichier Shiny. Figure 3.1: Appuyez sur Shiny Web App Dans la boite de dialogue, inscrire le nom de lapplication et choisir un dossier ou serons enregistré les fichiers et appuyez sur créer. Figure 3.2: Boite de dialogue pour créer une nouvelle application Shiny. Dans votre script app.R ainsi créé, effacez ce qui y est déjà inscrit et construisez le squelette de lapplication. library(shiny) ui &lt;- fluidPage( ) server &lt;- function(input, output){ } shinyApp(ui, server) Ces lignes de code sont à la base de toute application Shiny.  Ui : Pour user interface, définis la page web HTML dans laquelle lutilisateur va interagir.  Server : définis les instructions pour construire les objets et le comportement de lapplication.  shinyApp(ui, server) : Permets de combiner linterface ui et les instructions server pour créer lapplication web. À cette étape, si tout fonctionne normalement, en cliquant sur le bouton Run App (figure 3.3), vous devriez voir une page vide apparaitre. Figure 3.3: Le bouton Run App se retrouve en haut à droite de la fenêtre du script. Dans le dossier créé à létape 3, créez un dossier appelé data et copiez-y les fichiers .SHP du découpage des peuplements forestiers. Toutes les données nécessaires à la création de votre application doivent être dans ce dossier. Figure 3.4: Contenu de votre dossier après létape 5 Dans votre script app.R, ajoutez les bibliothèques qui vous seront utiles pour créer cette application. Si ces bibliothèques ne sont pas déjà installées, veuillez les installer de la même façon que nous avons installé Shiny à létape 1. library(sf) # pour manipuler des données géospatiales library(leaflet) # pour créer des cartes interactives library(leaflet.extras) library(tidyverse) # pour faciliter la programmation (opérateur &quot;%&gt;%&quot;) library(DT) # pour créer des tableaux interactifs Importez le fichier de découpage des peuplements dans R et changez le système de coordonnée géographique pour lutiliser avec Leaflet. st_read(&quot;le_nom_de_votre_fichier.shp&quot;) -&gt; peup_for if (!st_crs(peup_for)$epsg %in% c(4326)) st_transform(peup_for, 4326) -&gt; peup_for 3.2 Programmation des objets qui seront affiché dans linterface Ici, nous allons donner les instructions à R pour générer la carte interactive et la table des peuplements. Dans Shiny, les objets créés dans la section server, doivent être nommés de la façon suivante : server &lt;- function(input, output){ Output$text &lt;-renderPrint ({print(&quot;Hello, world!&quot;)}) } Dans lexemple ci-dessus, output$text indique que nous donnons les instructions pour programmer lobjet que nous avons nommé text.La fonction renderPrint va envelopper le code qui sera inscrit entre les parenthèses. Les fonctions render{Type} sont spécifique à lobjet que nous voulons créer. Pour la carte, nous utiliserons renderLeaflet({}) et pour la table, renderDataTable({}). 3.2.1 La carte interactive Pour créer la carte interactive, nous utiliserons le package Leaflet. Dans la section server de votre script, entre les accolades, créez lobjet carte. server &lt;- function(input, output){ output$carte &lt;- renderLeaflet({leaflet() %&gt;% }) En dessous de la ligne output$carte &lt;- renderLeaflet({leaflet() %&gt;%, ajoutez le découpage des peuplements forestier et définir la symbologie. addPolygons(data = peup_for, weight = 1.5, opacity = 2, fillOpacity = 0, options = pathOptions(pane = &quot;Peup&quot;), layerId = peup_for$No_Peup, group = &quot;Peuplement forestier&quot;)%&gt;% Ajoutez les images satellitaires fournies par Esri. addProviderTiles(&#39;Esri.WorldImagery&#39;, group = &quot;Satellite&quot;)%&gt;% Ajoutez le modèle numérique de terrain (MNT) à partir du service WMS du Ministère des forêts, faunes et parcs (MFFP). addWMSTiles(&quot;https://geoegl.msp.gouv.qc.ca/ws/mffpecofor.fcgi?&quot;, layers = &quot;lidar_ombre&quot;, options = WMSTileOptions(format = &quot;image/png&quot;, transparent = TRUE),group = &quot;Relief&quot;)%&gt;% Ajoutez le modèle hauteur de canopée (MHC) du MFFP. addWMSTiles(&quot;https://geoegl.msp.gouv.qc.ca/ws/mffpecofor.fcgi?&quot;, layers = &quot;lidar_mhc&quot;, options = WMSTileOptions(format = &quot;image/png&quot;, transparent = TRUE), group = &quot;Hauteur de canopée&quot;)%&gt;% Ajoutez la légende pour le MHC. addWMSLegend(position = &quot;bottomright&quot;, &quot;https://geoegl.msp.gouv.qc.ca/ws/mffpecofor.fcgi?version=1.3.0&amp;service=WMS&amp;request=GetLegendGraphic&amp;sld_version=1.1.0&amp;layer=lidar_mhc&amp;format=image/png&amp;STYLE=default&quot;, layerId = &quot;Hauteur de canopée&quot;)%&gt;% Ajoutez les contrôles de la carte. addLayersControl(overlayGroups = c(&quot;Peuplement forestier&quot;), baseGroups= c(&quot;Satellite&quot;,&quot;Hauteur de canopée&quot;,&quot;Relief&quot;), options = layersControlOptions(collapsed = TRUE))%&gt;% Ajoutez la barre déchelle addScaleBar(position = &quot;bottomleft&quot;) }) 3.2.2 La table des peuplements Pour créer le tableau interactif, nous utiliserons la pakage DT. Créez un nouveau tableau de données (data frame) à partir du tableau de données peup_for et manipulez les données en vue dintégrer ces données dans le tableau. À cette étape, il est nécessaire de supprimer la géométrie pour afficher les données dans un tableau. peup_for%&gt;% st_drop_geometry %&gt;% #supprime la géométrie subset(select= -OBJECTID)%&gt;% #supprime les champs inutiles mutate(sup_ha= round(sup_ha,2))%&gt;% # arrondit le champ &quot;sup_ha&quot; arrange(No_Peup)-&gt;info # Ordonne le tableau en ordre croissant en fonction du champ &quot;No_Peup&quot; Créez lobjet tableau output$tableau&lt;- renderDataTable({ datatable(info, colnames = c(&quot;# Peuplement&quot;, &quot;Affectation&quot;, &quot;Groupement d&#39;essence&quot;, &quot;Classe de densité&quot;, &quot;Classe de hauteur&quot;, &quot;Classe d&#39;âge&quot;, &quot;Type de couvert&quot;, &quot;Travaux suggérés&quot;,&quot;Échéancier&quot;,&quot;Superficie (ha)&quot;), rownames = FALSE, options = list( pageLength = 10, stateSave=TRUE), selection = &#39;single&#39;)}) 3.3 Programmation des interactions entre la carte et la table des peuplements Avec Shiny, il est possible de programmer des interactions entre plusieurs objets dune même application. Pour bien comprendre les étapes suivantes, veuillez vous référer aux site web suivant : Chapter 4 Basic reactivity | Mastering Shiny Reactivity - An overview How to understand reactivity in R Avec les lignes de codes qui vous seront présentés ci-dessous, lorsque lutilisateur cliquera sur un peuplement de la carte, ce peuplement sera mis en évidence et la ligne correspondant à celui-ci dans le tableau sera elle aussi mise en évidence. Il sera aussi possible de sélectionner une ligne dans le tableau pour mettre en évidence le peuplement correspondant. Avec la fonction reactive, nous allons enregistrer dans la variable num_peup, le numéro de la ligne du tableau qui est sélectionnée. Le numéro de la ligne du tableau doit correspondre au numéro de peuplement. Cest pour cette raison que nous avons ordonné les numéros de peuplements en ordre croissant à létape 1 de la section 3.2.2. num_peup &lt;- reactive({ info$No_Peup[input$tableau_rows_selected]}) Les prochaines lignes de code vont nous permettre de dessiner par-dessus le peuplement sélectionné, soit dans la carte ou dans la table, le même polygone, mais de couleur rouge. Pour ce faire, nous utiliserons la fonction observe et une clause if pour y arriver. La fonction leafletProxy() permet de mettre à jour la carte. observe({ if(!is.null(num_peup())){ observeEvent(input$tableau_rows_selected, {num_peup = input$tableau_rows_selected peup_surling&lt;- subset(peup_for,peup_for$No_Peup==num_peup) leafletProxy(&#39;map&#39;)%&gt;% removeShape(&quot;highlighted_polygon&quot;) %&gt;% addPolygons(data = peup_surling, weight = 3, opacity = 100, fillOpacity = 0, color = &quot;red&quot;, layerId = &quot;highlighted_polygon&quot;) })} else{leafletProxy(&quot;map&quot;) %&gt;% removeShape(&quot;highlighted_polygon&quot;) }}) Pour que le polygone rouge apparaisse par-dessus les autres polygones, nous devons ajouter deux commandes dans les instruction de la carte en dessous de la ligne output$map &lt;- renderLeaflet({leaflet() %&gt;%. addMapPane(&quot;highlighted_polygon&quot;,zIndex = 410)%&gt;% # Augmente l&#39;altitude du polygone rouge addMapPane(&quot;Peup&quot;,zIndex = 300)%&gt;% # Enfin, nous voulons que la rangée du tableau correspondant au peuplement sélectionné dans la carte soit mise en évidence. Pour faire cela, nous utiliserons la fonction observeEvent pour que lorsquun peuplement est sélectionné, son identifiant soit enregistré dans la variable clickid. Cette variable sera utilisée dans la fonction dataTableProxy pour mettre à jour le tableau avec la rangée surlignée et à la bonne page. observeEvent( input$map_shape_click, { clickid&lt;-input$map_shape_click$id dataTableProxy(&quot;tableau&quot;) %&gt;% selectRows(which(input$tableau_rows_all == clickid)) %&gt;% # Sélectionne la rangée selectPage(which(input$tableau_rows_all == clickid) %/% # Sélectionne la page input$tableau_state$length + 1)}) 3.4 Programation de linterface Dans cette section nous verrons comment programmer la disposition des objets que nous avons créée dans linterface. Pour ce faire, toutes les commandes que nous aborderons ci-dessous doivent être inscrites dans la section ui de notre script. Dans notre exemple, nous utiliserons la fonction fluidRow pour placer la carte au-dessus du tableau. Pour bien comprendre comment les interfaces sont programmées avec Shiny, consultez la page web suivante : Shiny - Application layout guide (rstudio.com) Chapter 3 Basic UI | Mastering Shiny Entre les parenthèses de la fonction ui &lt;- fluidPage(), inscrire les lignes de codes suivantes : # La carte dams la première rangée fluidRow(column(width=8, # Largeur de la carte offset= 2, # Décalage de la carte par aux bordures h2(&quot;Carte du lot&quot;), #Titre leafletOutput(outputId = &quot;carte&quot;, # Nom de l&#39;objet qui a créé du côté serveur height = 600))), # Hauteur de l&#39;objet # Le tableau dans la deuxième rangée fluidRow(column(width=10, offset= 1, dataTableOutput(outputId = &quot;tableau&quot;))) Testez laplication en appuyant sur le bouton Run App (figure 3.3) "],["conclusion.html", "4 Conclusion", " 4 Conclusion "],["bibliographie.html", "Bibliographie", " Bibliographie "]]
